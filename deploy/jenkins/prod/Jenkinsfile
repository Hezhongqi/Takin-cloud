pipeline {
  agent {
    node {
      label 'docker'
    }
  }

    parameters {
        string(name: 'IS_UNIT_TEST', defaultValue: 'false', description: '是否执行单元测试')
        string(name: 'IS_EXEC_SONAR', defaultValue: 'false', description: '是否执行sonarqube analysis，会增加构建时间')
    }

    environment {

    /* ************************************************************************** */

        /* build env */
        APP_NAME="tro-cloud"
        BUILD_ENV="prod"
        NACOS="http://nacos.forcecop-prod.192.168.1.205.nip.io:31897"

    /* ************************************************************************** */

        /* k8s namespace */
        KUBE_NAMESPACE="forcecop-prod"
        KUBE_DEPLOYMENT="deploy/k8s/$BUILD_ENV/devops-deployment.yaml"
        KUBE_SVC="deploy/k8s/$BUILD_ENV/devops-svc.yaml"

    /* ************************************************************************** */
        /* git info */
        GIT_CREDENTIAL_ID="hengyu-gitlab-id"
        GIT_ACCOUNT="flpt"
        GIT_HOST="114.55.142.190"
        GIT_DEVOPS_BASE_REPO_FOLDER="forcecop-devops"

    /* ************************************************************************** */

        /* docker registry */
        REGISTRY="192.168.1.176"
        REGISTRY_NAME="admin"
        REGISTRY_PASSWORD="pamirs@2020"
        REGISTRY_PROJECT_NAMESPACE="forcecop"
        DOCKER_CREDENTIAL_ID="harbor-id"
        DOCKER_IMAGE_NAME = "$REGISTRY/$REGISTRY_PROJECT_NAMESPACE/$APP_NAME:$BUILD_ENV-SNAPSHOT"

    /* ************************************************************************** */

        /* sonar account token */
        SONAR_HOST_URL="http://192.168.1.145:9000"
        SONAR_ACCOUNT_TOKEN="28365cc3c8f80ea9e89123f2f260015fb7404fec"



    /* ************************************************************************** */

        /* maven home */
        MAVEN_HOME="/usr/local/apache-maven-3.5.4/bin"

    /* ************************************************************************** */

        /* maven settings file */
        MAVEN_SETTING_FILE="deploy/config/settings.xml"

    /* ************************************************************************** */


    }

    stages {

        /* git clone source */
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
        }

        stage ('checkout deploy config') {
              steps {
                  withCredentials([usernamePassword(credentialsId: "$GIT_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                       sh 'echo pipeline base branch name :  $APP_NAME/$BRANCH_NAME'
                       sh 'git config --global user.email "guohaozhu@shulie.io" '
                       sh 'git config --global user.name "guohaozhu" '
                       sh 'rm -rf $GIT_DEVOPS_BASE_REPO_FOLDER'
                       sh 'git clone -b $APP_NAME http://$GIT_USERNAME:$GIT_PASSWORD@$GIT_HOST/guohaozhu/$GIT_DEVOPS_BASE_REPO_FOLDER.git '
                       sh 'cd $GIT_DEVOPS_BASE_REPO_FOLDER && pwd && ls'
                       sh 'cd ..'
                       sh 'sh $GIT_DEVOPS_BASE_REPO_FOLDER/init.sh $NACOS'
                  }
              }
        }

        /* init env */
        stage ('init env param') {
            steps {
               sh 'sh deploy/shell/$BUILD_ENV/k8s_env.sh $APP_NAME $BUILD_ENV $KUBE_NAMESPACE $DOCKER_IMAGE_NAME $BRANCH_NAME'
               sh 'sh deploy/shell/$BUILD_ENV/dockerfile_env.sh $APP_NAME $BUILD_ENV $KUBE_NAMESPACE $DOCKER_IMAGE_NAME $BRANCH_NAME'
            }
        }


        stage ('unit prod') {
            when {
              equals expected: 'true',
              actual: params.IS_UNIT_TEST
            }
            steps {
                 sh '$MAVEN_HOME/mvn clean  -gs $MAVEN_SETTING_FILE test'
            }
        }



        stage ('build') {
            steps {
                sh '$MAVEN_HOME/mvn clean install -gs $MAVEN_SETTING_FILE -Dmaven.test.skip=true'
            }
        }

        stage('sonarqube analysis') {
            when {
              equals expected: 'true',
              actual: params.IS_EXEC_SONAR
            }
              steps {
                  sh "$MAVEN_HOME/mvn sonar:sonar -gs $MAVEN_SETTING_FILE  -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_ACCOUNT_TOKEN"
              }
        }


        stage ('build & push') {
            steps {
                sh 'rm -rf `pwd`/target'
                sh 'mkdir `pwd`/target'
                sh 'cp `pwd`/takin-cloud-app/target/*.jar `pwd`/target'
                sh 'mv `pwd`/target/*.jar `pwd`/target/tro-cloud.jar'
                sh 'ls -l `pwd`/target'
                sh 'docker build -f `pwd`/deploy/dockerfile/$BUILD_ENV/Dockerfile -t $DOCKER_IMAGE_NAME .'
                sh 'echo $REGISTRY_PASSWORD | docker login $REGISTRY -u $REGISTRY_NAME --password-stdin'
                sh 'docker push  $DOCKER_IMAGE_NAME'
            }
        }

        stage('deploy to prod') {
          steps {
               sh 'kubectl apply -f  $KUBE_DEPLOYMENT'
               sh 'kubectl apply -f  $KUBE_SVC'
          }
        }

//         stage('push with tag'){
//           steps {
//               withCredentials([usernamePassword(credentialsId: "$GIT_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
//                    sh 'echo "获取凭据"'
//                    sh 'git config --global user.email "guohaozhu@shulie.io" '
//                    sh 'git config --global user.name "guohaozhu" '
//                    sh 'git tag -a $TAG_NAME -m "$TAG_NAME" '
//                    sh 'git push http://$GIT_USERNAME:$GIT_PASSWORD@$GIT_HOST/$GIT_ACCOUNT/$APP_NAME.git --tags'
//                    sh 'docker tag  $REGISTRY/$REGISTRY_PROJECT_NAMESPACE/$APP_NAME:$BUILD_ENV-SNAPSHOT $REGISTRY/$REGISTRY_PROJECT_NAMESPACE/$APP_NAME:$BUILD_ENV-$TAG_NAME '
//                    sh 'docker push  $REGISTRY/$REGISTRY_PROJECT_NAMESPACE/$APP_NAME:$BUILD_ENV-$TAG_NAME '
//               }
//           }
//         }
    }


}
